name: Deploy Systest to Aws Ecs

env:
  ECR_REPOSITORY: learnspace-backend-systest
  CLUSTER: learnspace-africa
  ECS: learnspace-backend-systest
  AWS_REGION: eu-west-1
  REPO_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/learnspace-backend-systest 
  EMAILS: 'sam@semicolon.africa,ladipo@semicolon.africa,t.lemon@semicolon.africa,divinemercy601@gmail.com,qudusa55@gmail.com,o.koleaje@semicolon.africa,ned@semicolon.africa,tade@semicolon.africa,moyinoluwa@semicolon.africa,mariam@semicolon.africa,i.james@semicolon.africa,david@semicolon.africa,abigail@semicolon.africa,precious@semicolon.africa,dapo@semicolon.africa,pauline@semicolon.africa,pauline@semicolon.africa,davidoso@semicolon.africa,henry@semicolon.africa'
  

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Restore Maven Cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/*.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Set environment variables
        id: vars
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          PROJECT_NAME="Nkwadoma Backend"
          DEFAULT_BRANCH=$(git rev-parse --abbrev-ref origin/HEAD | sed 's@^origin/@@')
          TASK_BRANCH=${{ github.head_ref }}
          TAG="${PROJECT_NAME}-${DEFAULT_BRANCH}-${TASK_BRANCH}"
          echo "TAG=${TAG}" >> $GITHUB_ENV
          echo "JAR_NAME=myapp-${TAG}.jar" >> $GITHUB_ENV
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an <%ae>')
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=${COMMIT_AUTHOR}" >> $GITHUB_ENV

   #      COMMIT_MESSAGE=$(git log -1 --pretty=%B)
   #      echo "COMMIT_TITLE=${COMMIT_TITLE}" >> $GITHUB_ENV
   #      COMMIT_TITLE=$(git log -1 --pretty=%s)
   #      echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV

      - name: Debug Environment Variables
        run: |
          echo "TAG=${{ env.TAG }}"
          echo "BRANCH_NAME=${{ env.BRANCH_NAME }}"
          echo "COMMIT_AUTHOR=${{ env.COMMIT_AUTHOR }}"
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}"
          echo "COMMIT_TITLE=${{ env.COMMIT_TITLE }}"
          echo "COMMIT_MESSAGE=${{ env.COMMIT_MESSAGE }}"


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: docker build -t ${{ env.REPO_URL }}:latest .

      # - name: Tag Docker image with "latest"
      #   run: |
      #     DOCKER_TAG=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY}}:latest
      #     docker tag ${{ env.ECR_REPOSITORY }}:$GITHUB_SHA $DOCKER_TAG
      #     docker tag ${{ env.ECR_REPOSITORY }}:$GITHUB_SHA ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:$GITHUB_SHA

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
        # docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:$GITHUB_SHA

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ env.CLUSTER }} --service ${{ env.ECS }} --force-new-deployment
      
  send_notification:
    name: Send Email Notification
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set environment variables
        run: |
          echo "TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          # Determine the branch name based on the event type
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
             BRANCH_NAME=$(echo "${GITHUB_HEAD_REF}")
          else
             BRANCH_NAME=$(git rev-parse --abbrev-ref "${GITHUB_HEAD_REF}")
          fi
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an <%ae>')" >> $GITHUB_ENV
          # Capture full commit message
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          # Escape special characters
          COMMIT_MESSAGE="${COMMIT_MESSAGE//\\/\\\\}"
          COMMIT_MESSAGE="${COMMIT_MESSAGE//\"/\\\"}"
          COMMIT_MESSAGE="${COMMIT_MESSAGE//\(/\\(}"
          COMMIT_MESSAGE="${COMMIT_MESSAGE//\)/\\)}"
          COMMIT_MESSAGE="${COMMIT_MESSAGE//#/\\#}"
          COMMIT_MESSAGE="${COMMIT_MESSAGE//$'\n'/\\n}"
          COMMIT_MESSAGE="${COMMIT_MESSAGE//$'\r'/}"
          echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      
      - name: Debug - Print environment variables
        run: |
          echo "TAG: ${{ env.TAG }}"
          echo "BRANCH_NAME: ${{ env.BRANCH_NAME }}"
          echo "COMMIT_AUTHOR: ${{ env.COMMIT_AUTHOR }}"
          echo "COMMIT_MESSAGE: ${{ env.COMMIT_MESSAGE }}"

      - name: Send build success email notification
        if: >
          success() 
        env:
          SMTP_SERVER: semicolon.africa
          SMTP_PORT: 465
          SMTP_USERNAME: builds@semicolon.africa
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        run: |
          echo "Sending success email with the following details:"
          echo "This is the Commit Message: $COMMIT_MESSAGE"
          echo "SonarQube URL Set: $SONARQUBE_URL_SET"
          echo "Maven Report URL Set: $MAVEN_REPORT_URL_SET"
          echo "Automation Test URL Set: $AUTOMATION_TEST_URL_SET"
          chmod +x .github/workflows/scripts/send_success_email.sh
          .github/workflows/scripts/send_success_email.sh \
            "$SMTP_SERVER" \
            "$SMTP_PORT" \
            "$SMTP_USERNAME" \
            "$SMTP_PASSWORD" \
            "${{ env.EMAILS }}" \
            "${{ env.TAG }}" \
            "${{ env.BRANCH_NAME }}" \
            "${{ env.COMMIT_AUTHOR }}" \
            "$SONARQUBE_URL_SET" \
            "$MAVEN_REPORT_URL_SET" \
            "$AUTOMATION_TEST_URL_SET" \
            "${{ env.COMMIT_MESSAGE }}" 

      - name: Send build failure email notification
        if: >
          failure()
        env:
          SMTP_SERVER: semicolon.africa
          SMTP_PORT: 465
          SMTP_USERNAME: builds@semicolon.africa
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        run: |
          echo "Sending failure email with the following details:"
          echo "SonarQube URL Set: $SONARQUBE_URL_SET"
          echo "Maven Report URL Set: $MAVEN_REPORT_URL_SET"
          echo "Automation Test URL Set: $AUTOMATION_TEST_URL_SET"
          chmod +x .github/workflows/scripts/send_failure_email.sh
          .github/workflows/scripts/send_failure_email.sh \
            "$SMTP_SERVER" \
            "$SMTP_PORT" \
            "$SMTP_USERNAME" \
            "$SMTP_PASSWORD" \
            "${{ env.EMAILS }}" \
            "${{ env.TAG }}" \
            "${{ env.BRANCH_NAME }}" \
            "${{ env.COMMIT_AUTHOR }}" \
            "$SONARQUBE_URL_SET" \
            "$MAVEN_REPORT_URL_SET" \
            "$AUTOMATION_TEST_URL_SET" \
            "${{ env.COMMIT_MESSAGE }}"
