name: Deploy Systest to Amazon EC2

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

env:
  REPO_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/nkwadoma
  ECR_REPOSITORY: nkwadoma
  AWS_REGION: us-east-1
  EMAILS: >-
    sam@semicolon.africa,joshua.o@semicolon.africa,ladipo@semicolon.africa,
    t.lemon@semicolon.africa,divinemercy601@gmail.com,qudusa55@gmail.com,o.koleaje@semicolon.africa,
    ned@semicolon.africa,tade@semicolon.africa,moyinoluwa@semicolon.africa

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build the application
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: alpha
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: SSH to EC2 and Deploy Docker Container
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET_NAME: semicolon-delivery
          S3_REGION: eu-west-1
        run: |
          echo "$EC2_SSH_KEY" > QA-KP.pem
          chmod 600 QA-KP.pem
          ssh -t -o StrictHostKeyChecking=no -i QA-KP.pem $EC2_USER@$EC2_HOST << 'EOF'
          set -e
          AWS_REGION="us-east-1"
          AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID}"
          ECR_REPOSITORY="nkwadoma"
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          IMAGE_TAG="alpha"

          echo "Authenticating with ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

          echo "Fetching environment variables from S3..."
          aws s3 cp s3://$S3_BUCKET_NAME/nkwadoma/backend/dev/nkwadoma.env nkwadoma-dev.env --region $S3_REGION

          echo "Pulling the latest image..."
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          echo "Freeing port 8768 if in use..."
          sudo fuser -k 8768/tcp || true

          if [ "$(docker ps -aq -f name=nkwadoma-container)" ]; then
            docker stop nkwadoma-container || true
            docker rm nkwadoma-container || true
          fi

          echo "Starting the new container..."
          docker run -d --name nkwadoma-container -p 8768:8768 \
              --env-file nkwadoma-dev.env \
              $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          docker system prune -af --filter "until=24h" || true
          EOF
