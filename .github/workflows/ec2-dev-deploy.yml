name: Deploy Systest to Amazon EC2

on:
  push:
    branches:
      - dev


env:
  REPO_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/nkwadoma
  ECR_REPOSITORY: nkwadoma
  AWS_REGION: us-east-1
  CLUSTER: learnspace-africa
  SERVICE: learnspace-backend-systest
  EMAILS: 'sam@semicolon.africa,joshua.o@semicolon.africa,ladipo@semicolon.africa,t.lemon@semicolon.africa,divinemercy601@gmail.com,qudusa55@gmail.com,o.koleaje@semicolon.africa,ned@semicolon.africa,tade@semicolon.africa,moyinoluwa@semicolon.africa,mariam@semicolon.africa,i.james@semicolon.africa,david@semicolon.africa,abigail@semicolon.africa,precious@semicolon.africa,dapo@semicolon.africa,pauline@semicolon.africa,davidoso@semicolon.africa,henry@semicolon.africa'
  IV_AES_KEY: ${{ secrets.IV_AES_KEY }}
  AES_SECRET_KEY: ${{ secrets.AES_SECRET_KEY }}

jobs:
  build-and-push:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build the application
        env:
          CREDIT_REGISTRY_EMAIL: ${{ secrets.CREDIT_REGISTRY_EMAIL_ADDRESS }}
          CREDIT_REGISTRY_SUBSCRIBER_ID: ${{ secrets.CREDIT_REGISTRY_SUBSCRIBERID }}
          CREDIT_REGISTRY_PASSWORD: ${{ secrets.CREDIT_REGISTRY_AGENT_PASSWORD }}
          CREDIT_REGISTRY_BASE_URL: ${{ secrets.CREDIT_REGISTRY_URL }}
          TEST_BVN: ${{ secrets.TEST_BVN_VALUE }}
          IV_AES_KEY: ${{ secrets.IV_AES_KEY }}
          AES_SECRET_KEY: ${{ secrets.AES_SECRET_KEY }}
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: alpha
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          
  migrate-database:
    runs-on: ubuntu-24.04
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Install Flyway CLI
        run: |
          curl -L https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.22.1/flyway-commandline-9.22.1-linux-x64.tar.gz -o flyway.tar.gz
          tar -xzf flyway.tar.gz
          sudo ln -s $PWD/flyway-*/flyway /usr/local/bin/flyway
  
      - name: Run Flyway migrations
        run: |
          mkdir -p logs
          flyway -url=${{ secrets.DATABASE_URL }} \
                 -user=${{ secrets.DATABASE_USERNAME }} \
                 -password=${{ secrets.DATABASE_PASSWORD }} \
                 -locations=filesystem:./migrations \
                 -verbose migrate | tee logs/flyway-output.log
  
      - name: Upload Flyway Logs
        uses: actions/upload-artifact@v4
        with:
          name: flyway-logs
          path: logs/


        

  deploy:
    runs-on: ubuntu-24.04
    env:
      CREDIT_REGISTRY_EMAIL: ${{ secrets.CREDIT_REGISTRY_EMAIL_ADDRESS }}
      CREDIT_REGISTRY_SUBSCRIBER_ID: ${{ secrets.CREDIT_REGISTRY_SUBSCRIBERID }}
      CREDIT_REGISTRY_PASSWORD: ${{ secrets.CREDIT_REGISTRY_AGENT_PASSWORD }}
      CREDIT_REGISTRY_BASE_URL: ${{ secrets.CREDIT_REGISTRY_URL }}
      IV_AES_KEY: ${{ secrets.IV_AES_KEY }}
      AES_SECRET_KEY: ${{ secrets.AES_SECRET_KEY }}
    needs: [build-and-push, migrate-database]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SSH to EC2 and Deploy Docker Container
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET_NAME: semicolon-delivery
          S3_REGION: eu-west-1
          IV_AES_KEY: ${{ secrets.IV_AES_KEY }}
          AES_SECRET_KEY: ${{ secrets.AES_SECRET_KEY }}
        run: |
          echo "$EC2_SSH_KEY" > QA-KP.pem
          chmod 600 QA-KP.pem
          ssh -o StrictHostKeyChecking=no -i QA-KP.pem $EC2_USER@$EC2_HOST << 'EOF'
          set -e
      
          echo "SSH connection established!"
          
          # Define variables
          AWS_REGION="us-east-1"
          AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REGISTRY="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          ECR_REPOSITORY="nkwadoma"
          IMAGE_TAG="alpha"
      
          echo "Authenticating with ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      
          echo "Fetching environment variables from S3..."
          aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/nkwadoma/backend/dev/nkwadoma.env nkwadoma-dev.env --region ${{ env.S3_REGION }}
      
          # Pull the latest Docker image
          echo "Pulling the latest image..."
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/nkwadoma:alpha
          # Free port 8768 if it's in use
          echo "Freeing port 443 if in use..."
          sudo fuser -k 443/tcp || true
              
          # Check if the container exists
          if [ "$(docker ps -aq -f name=nkwadoma-container)" ]; then
             echo "Stopping and removing existing container..."
             docker stop nkwadoma-container || true
             docker rm nkwadoma-container || true
             echo "Stopped and removed containers."
          fi
              
          # Run the new container
          echo "Starting the new container..."
          docker run -d --name nkwadoma-container -p 443:443 \
              --env-file nkwadoma-dev.env \
              357586184453.dkr.ecr.us-east-1.amazonaws.com/nkwadoma:alpha
          
         
          echo "Container started successfully!"
          # Clean up unused Docker resources without affecting running containers
          echo "Performing safe Docker cleanup..."
          docker system prune -f
      
          EOF

  # send_notification:
  #   name: Send Email Notification
  #   needs: [build-and-push, deploy]
  #   runs-on: ubuntu-latest
  #   if: always()
  
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set environment variables
  #       run: |
  #         echo "TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
  #         # Determine the branch name based on the event type
  #         if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
  #            BRANCH_NAME=$(echo "${GITHUB_HEAD_REF}")
  #         else
  #            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
  #         fi
  #         echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
  #         echo "COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an <%ae>')" >> $GITHUB_ENV
  #         # Capture full commit message
  #         COMMIT_MESSAGE=$(git log -1 --pretty=%B)
  #         # Escape special characters
  #         COMMIT_MESSAGE="${COMMIT_MESSAGE//\\/\\\\}"
  #         COMMIT_MESSAGE="${COMMIT_MESSAGE//\"/\\\"}"
  #         COMMIT_MESSAGE="${COMMIT_MESSAGE//\(/\\(}"
  #         COMMIT_MESSAGE="${COMMIT_MESSAGE//\)/\\)}"
  #         COMMIT_MESSAGE="${COMMIT_MESSAGE//#/\\#}"
  #         COMMIT_MESSAGE="${COMMIT_MESSAGE//$'\n'/\\n}"
  #         COMMIT_MESSAGE="${COMMIT_MESSAGE//$'\r'/}"
  #         echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
  #         echo "$COMMIT_MESSAGE" >> $GITHUB_ENV
  #         echo "EOF" >> $GITHUB_ENV
    
  #         echo "This is the Commit Message: $COMMIT_MESSAGE"
  #         echo "SONARQUBE_URL_SET=${{ needs.build_and_analyze.outputs.sonarqube_url_set }}" >> $GITHUB_ENV
  #         echo "MAVEN_REPORT_URL_SET=${{ needs.deploy.outputs.maven_report_url_set }}" >> $GITHUB_ENV
  #         echo "AUTOMATION_TEST_URL_SET=${{ needs.run_tests.outputs.automation_test_url_set }}" >> $GITHUB_ENV
          
  #     - name: Send build success email notification
  #       if: success()
  #       env:
  #         SMTP_SERVER: semicolon.africa
  #         SMTP_PORT: 465
  #         SMTP_USERNAME: builds@semicolon.africa
  #         SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
  #       run: |
  #         echo "Sending success email..."
  #         chmod +x .github/workflows/scripts/send_success_email.sh
  #         .github/workflows/scripts/send_success_email.sh \
  #           "$SMTP_SERVER" \
  #           "$SMTP_PORT" \
  #           "$SMTP_USERNAME" \
  #           "$SMTP_PASSWORD" \
  #           "${{ env.EMAILS }}" \
  #           "${{ env.TAG }}" \
  #           "${{ env.BRANCH_NAME }}" \
  #           "${{ env.COMMIT_AUTHOR }}" \
  #           "BUILD_REPORT_URL_SET" \
  #           "AUTOMATION_TEST_URL_SET" \
  #           "${{ env.COMMIT_MESSAGE }}"
  #     - name: Send build failure email notification
  #       if: failure()
  #       env:
  #         SMTP_SERVER: semicolon.africa
  #         SMTP_PORT: 465
  #         SMTP_USERNAME: builds@semicolon.africa
  #         SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
  #       run: |
  #         echo "Sending failure email..."
  #         chmod +x .github/workflows/scripts/send_failure_email.sh
  #         .github/workflows/scripts/send_failure_email.sh \
  #           "$SMTP_SERVER" \
  #           "$SMTP_PORT" \
  #           "$SMTP_USERNAME" \
  #           "$SMTP_PASSWORD" \
  #           "${{ env.EMAILS }}" \
  #           "${{ env.TAG }}" \
  #           "${{ env.BRANCH_NAME }}" \
  #           "${{ env.COMMIT_AUTHOR }}" \
  #           "BUILD_REPORT_URL_SET" \
  #           "AUTOMATION_TEST_URL_SET" \
  #           "${{ env.COMMIT_MESSAGE }}"
