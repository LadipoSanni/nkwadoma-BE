name: Deploy Systest to Amazon EC2

on:
  push:
    branches:
      - dev

env:
  REPO_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/nkwadoma
  ECR_REPOSITORY: nkwadoma
  AWS_REGION: us-east-1
  CLUSTER: learnspace-africa
  SERVICE: learnspace-backend-systest

jobs:
  build-and-push:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build the application
        env:
          CREDIT_REGISTRY_EMAIL: ${{ secrets.CREDIT_REGISTRY_EMAIL_ADDRESS }}
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: alpha
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  migrate-database:
    runs-on: ubuntu-24.04
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Flyway CLI
        run: |
          curl -L https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.22.1/flyway-commandline-9.22.1-linux-x64.tar.gz -o flyway.tar.gz
          tar -xzf flyway.tar.gz
          sudo ln -s $PWD/flyway-*/flyway /usr/local/bin/flyway

      - name: Run Flyway migrations
        run: |
          mkdir -p logs
          flyway -url=${{ secrets.DATABASE_URL }} \
                 -user=${{ secrets.DATABASE_USERNAME }} \
                 -password=${{ secrets.DATABASE_PASSWORD }} \
                 -locations=filesystem:./migrations \
                 -verbose migrate | tee logs/flyway-output.log

      - name: Upload Flyway Logs
        uses: actions/upload-artifact@v4
        with:
          name: flyway-logs
          path: logs/

  deploy:
    runs-on: ubuntu-24.04
    env:
      CREDIT_REGISTRY_EMAIL: ${{ secrets.CREDIT_REGISTRY_EMAIL_ADDRESS }}
      CREDIT_REGISTRY_SUBSCRIBER_ID: ${{ secrets.CREDIT_REGISTRY_SUBSCRIBERID }}
      CREDIT_REGISTRY_PASSWORD: ${{ secrets.CREDIT_REGISTRY_AGENT_PASSWORD }}
      CREDIT_REGISTRY_BASE_URL: ${{ secrets.CREDIT_REGISTRY_URL }}
      IV_AES_KEY: ${{ secrets.IV_AES_KEY }}
      AES_SECRET_KEY: ${{ secrets.AES_SECRET_KEY }}
    needs: [build-and-push, migrate-database]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SSH to EC2 and Deploy Docker Container
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET_NAME: semicolon-delivery
          S3_REGION: eu-west-1
        run: |
          echo "$EC2_SSH_KEY" > QA-KP.pem
          chmod 600 QA-KP.pem
          ssh -o StrictHostKeyChecking=no -i QA-KP.pem $EC2_USER@$EC2_HOST << 'EOF'
          set -e

          echo "SSH connection established!"

          AWS_REGION="us-east-1"
          ECR_REGISTRY="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          ECR_REPOSITORY="nkwadoma"
          IMAGE_TAG="alpha"

          echo "Authenticating with ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

          echo "Fetching environment variables from S3..."
          aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/nkwadoma/backend/dev/nkwadoma.env nkwadoma-dev.env --region ${{ env.S3_REGION }}

          echo "Pulling the latest image..."
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          echo "Freeing port 8768 if in use..."
          sudo fuser -k 8768/tcp || true

          if [ "$(docker ps -aq -f name=nkwadoma-container)" ]; then
             echo "Stopping and removing existing container..."
             docker stop nkwadoma-container || true
             docker rm nkwadoma-container || true
          fi

          echo "Starting the new container..."
          docker run -d --name nkwadoma-container -p 8768:8768 \
              --env-file nkwadoma-dev.env \
              $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          echo "Performing safe Docker cleanup..."
          docker system prune -f
          EOF

  # deploy-to-local:
  #   runs-on: self-hosted
  #   needs: build-and-push
  #   steps:
  #     - name: Authenticate with Amazon ECR
  #       run: |
  #         aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ env.REPO_URL }}

  #     - name: Pull latest Docker image
  #       run: |
  #         docker pull ${{ env.REPO_URL }}:alpha

  #     - name: Free port 8768 if in use
  #       run: |
  #         sudo fuser -k 8768/tcp || true

  #     - name: Restart container with auto-restart policy
  #       run: |
  #         CONTAINER_NAME="nkwadoma-container"
  #         ENV_FILE_PATH="/home/cloud-group/nkwadoma-systest.env"

  #         if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
  #           docker stop $CONTAINER_NAME || true
  #           docker rm $CONTAINER_NAME || true
  #         fi

  #         docker network inspect meedl-network >/dev/null 2>&1 || docker network create meedl-network

  #         docker run --env-file $ENV_FILE_PATH --network meedl-network --name $CONTAINER_NAME -p 8768:8768 \
  #           --restart unless-stopped \
  #           ${{ env.REPO_URL }}:alpha

  #     - name: Confirm Deployment Success
  #       run: |
  #         sleep 10
  #         if docker ps --format '{{.Names}}' | grep -q "nkwadoma-container"; then
  #           echo "✅ Deployment to local machine successful!"
  #           exit 0
  #         else
  #           echo "❌ Deployment failed!"
  #           exit 1
