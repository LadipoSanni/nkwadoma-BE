name: Deploy Systest to Amazon EC2 and Local

on:
  pull_request:
    branches:
      - 'dev'
 
  push:
    branches:
      - 'dev'

# on:
#   push:
#     branches:
#       - 'dev'
#       - 'systest'
#   pull_request:
#     branches:
#       - 'dev' 
#       - 'systest'

env:
  REPO_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/nkwadoma
  ECR_REPOSITORY: nkwadoma
  AWS_REGION: us-east-1

jobs:
  # ======================= BUILD AND PUSH =======================
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/dev'
    # if: github.event_name == 'pull_request' 
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build the application
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Tag Docker image
        run: |
          IMAGE_TAG=${{ env.REPO_URL }}:alpha
          docker build -t nkwadoma:$GITHUB_SHA -f Dockerfile .
          docker tag nkwadoma:$GITHUB_SHA $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Push Docker image to Amazon ECR
        run: docker push $IMAGE_TAG

  # ======================= DEPLOY TO EC2 =======================
  # deploy-to-ec2:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
  #   # if: github.event_name == 'pull_request' 
    
  #   steps:
  #     - name: SSH into EC2 and Deploy Container
  #       env:
  #         EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  #         EC2_USER: ${{ secrets.EC2_USER }}
  #         EC2_HOST: ${{ secrets.EC2_HOST }}
  #         S3_BUCKET_NAME: semicolon-delivery
  #         S3_REGION: eu-west-1
  #       run: |
  #         echo "$EC2_SSH_KEY" > QA-KP.pem
  #         chmod 600 QA-KP.pem
  #         ssh -t -o StrictHostKeyChecking=no -i "QA-KP.pem" $EC2_USER@$EC2_HOST << 'EOF'
  #         set -e
          
  #         echo "‚úÖ SSH connection established!"

  #         # Login to Amazon ECR
  #         aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.REPO_URL }}

  #         # Fetch latest environment file from S3
  #         echo "üì• Downloading environment file from S3..."
  #         aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/nkwadoma/backend/dev/nkwadoma.env nkwadoma.env --region ${{ env.S3_REGION }}

  #         if [ ! -f "nkwadoma.env" ]; then
  #           echo "‚ùå ERROR: nkwadoma.env file not found!"
  #           exit 1
  #         fi

  #         # Pull latest Docker image
  #         echo "üì¶ Pulling latest Docker image..."
  #         docker pull ${{ env.REPO_URL }}:alpha

  #         # Stop any running container on port 8768
  #         sudo fuser -k 8768/tcp || true

  #         # Remove existing container if exists
  #         CONTAINER_NAME="nkwadoma-container"
  #         if [ "$(docker ps -aq -f name=${CONTAINER_NAME})" ]; then
  #            docker stop ${CONTAINER_NAME} || true
  #            docker rm ${CONTAINER_NAME} || true
  #         fi

  #         # Run the container
  #         echo "üöÄ Running the container..."
  #         docker run -d --name ${CONTAINER_NAME} -p 8768:8768 \
  #             --env-file nkwadoma.env \
  #             --restart unless-stopped \
  #             "${{ env.REPO_URL }}:alpha"

  #         # Clean up old unused Docker images
  #         docker system prune -f
  #         EOF

  # ======================= DEPLOY TO LOCAL =======================
  deploy-to-local:
   runs-on: self-hosted
   needs: build-and-push
   if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
   steps:
    - name: Authenticate with Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

    - name: Pull latest Docker image
      run: |
        docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:alpha

    - name: Download env file from S3
      run: |
        ENV_FILE_PATH="/home/cloud-group/nkwadoma-systest.env"
        aws s3 cp s3://semicolon-delivery/nkwadoma/backend/systest/nkwadoma.env $ENV_FILE_PATH --region eu-west-1

    - name: Free port 8768 if in use
      run: |
        sudo fuser -k 8768/tcp || true

    - name: Restart container with auto-restart policy
      run: |
        CONTAINER_NAME=nkwadoma_container
        ENV_FILE_PATH="/home/cloud-group/nkwadoma-systest.env"
        
        if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true
        fi
        
        docker network inspect meedl-network >/dev/null 2>&1 || docker network create meedl-network
        
        nohup docker run -d --env-file $ENV_FILE_PATH --network meedl-network --name $CONTAINER_NAME -p 8768:8768 \
          --restart unless-stopped \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:alpha > /dev/null 2>&1 &

    - name: Confirm Deployment Success
      run: |
        sleep 10
        if docker ps --format '{{.Names}}' | grep -q "nkwadoma_container"; then
          echo "‚úÖ Deployment to local machine successful!"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi

