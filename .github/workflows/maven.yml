name: Java CI with Maven

on:
  push:
    branches:
      - systest

env:
  PROFILE: systest
  AWS_REGION: "eu-west-1"
  API_VERSIONING: /api/v1
  DEV_FRONTEND_BASE_URL: http://localhost:3000
  KEYCLOAK_IMAGE: quay.io/keycloak/keycloak:26.2.5
  KEYCLOAK_CONTAINER: keycloak
  KEYCLOAK_PORT: 8080
  KEYCLOAK_REALM: meedl-prod
  KEYCLOAK_ADMIN: admin
  KEYCLOAK_ADMIN_PASSWORD: admin
  CLIENT_ID: meedl-prod

jobs:
  test:
    name: Unit Test
    runs-on: ubuntu-24.04

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: meedl_build
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --mount type=tmpfs,destination=/var/lib/postgresql/data
        ports:
          - 5432:5432

    steps:
      - name: üß© Checkout repository
        uses: actions/checkout@v4

      - name: üß∞ Install PostgreSQL client + jq
        run: sudo apt-get update && sudo apt-get install -y postgresql-client curl jq

      - name: üïí Wait for PostgreSQL
        run: |
          echo "‚è≥ Waiting for PostgreSQL to start..."
          for i in {1..30}; do
            if pg_isready -h localhost -U postgres > /dev/null 2>&1; then
              echo "‚úÖ PostgreSQL is ready!"
              break
            fi
            sleep 2
          done

      - name: üöÄ Start Keycloak with imported realm
        run: |
          echo "Starting Keycloak (Realm: $KEYCLOAK_REALM)..."
          docker run -d --name $KEYCLOAK_CONTAINER \
            -p $KEYCLOAK_PORT:8080 \
            -e KEYCLOAK_ADMIN=$KEYCLOAK_ADMIN \
            -e KEYCLOAK_ADMIN_PASSWORD=$KEYCLOAK_ADMIN_PASSWORD \
            -v $PWD/backend/keycloak/realms/$KEYCLOAK_REALM.json:/opt/keycloak/data/import/$KEYCLOAK_REALM.json \
            $KEYCLOAK_IMAGE \
            start-dev --import-realm \
              --http-enabled=true \
              --hostname-strict=false \
              --spi-theme-static-max-age=-1 \
              --spi-theme-cache-themes=false \
              --spi-theme-cache-templates=false \
              --features=scripts,token-exchange,admin-fine-grained-authz

          echo "‚è≥ Waiting for Keycloak to start..."
          for i in {1..60}; do
            if curl -fs "http://localhost:$KEYCLOAK_PORT/realms/$KEYCLOAK_REALM" > /dev/null; then
              echo "‚úÖ Keycloak and realm are available!"
              break
            fi
            echo "Still waiting... ($i/60)"
            sleep 5
          done

      - name: üîê Extract Keycloak Client Secret (from imported realm)
        id: keycloak
        run: |
          echo "üîë Logging into Keycloak (master realm)..."
          docker exec $KEYCLOAK_CONTAINER /opt/keycloak/bin/kcadm.sh config credentials \
            --server http://localhost:${KEYCLOAK_PORT} \
            --realm master \
            --user "$KEYCLOAK_ADMIN" \
            --password "$KEYCLOAK_ADMIN_PASSWORD"

          echo "üîç Fetching client UUID for realm: $KEYCLOAK_REALM, client: $CLIENT_ID ..."
          CLIENT_UUID=$(docker exec $KEYCLOAK_CONTAINER /opt/keycloak/bin/kcadm.sh get clients -r $KEYCLOAK_REALM --fields id,clientId | jq -r ".[] | select(.clientId==\"$CLIENT_ID\") | .id")

          if [ -z "$CLIENT_UUID" ]; then
            echo "‚ùå Client '$CLIENT_ID' not found in realm '$KEYCLOAK_REALM'. Please verify your imported realm JSON."
            exit 1
          fi

          CLIENT_SECRET=$(docker exec $KEYCLOAK_CONTAINER /opt/keycloak/bin/kcadm.sh get clients/$CLIENT_UUID/client-secret -r $KEYCLOAK_REALM | jq -r '.value')

          echo "‚úÖ Successfully fetched existing client secret."
          echo "client_secret=$CLIENT_SECRET" >> $GITHUB_OUTPUT
          echo "client_id=$CLIENT_ID" >> $GITHUB_OUTPUT
          echo "realm=$KEYCLOAK_REALM" >> $GITHUB_OUTPUT
          echo "server=http://localhost:${KEYCLOAK_PORT}" >> $GITHUB_OUTPUT

      - name: ‚òï Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: üß™ Run Maven Tests
        env:
          DATABASE_URL: jdbc:postgresql://localhost:5432/meedl_build
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: postgres
          KEYCLOAK_REALM: ${{ steps.keycloak.outputs.realm }}
          KEYCLOAK_SERVER: ${{ steps.keycloak.outputs.server }}
          KEYCLOAK_CLIENT_ID: ${{ steps.keycloak.outputs.client_id }}
          KEYCLOAK_CLIENT_SECRET: ${{ steps.keycloak.outputs.client_secret }}
          FRONTEND_BASE_URL: ${{ env.DEV_FRONTEND_BASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          PROFILE: systest
          AWS_REGION: "eu-west-1"
        run: |
          echo "üßπ Resetting test database..."
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS meedl_build;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE meedl_build;"
          echo "‚úÖ DB ready at jdbc:postgresql://localhost:5432/meedl_build"
          echo "üöÄ Running Maven tests..."
          mvn -B clean test

      - name: üìä Upload Surefire Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: target/surefire-reports/

  build:
    name: Build and Analyze
    needs: [test]
    runs-on: ubuntu-latest
    env:
      KEYCLOAK_CLIENT_SECRET: ${{ needs.test.outputs.keycloak_client_secret }}
      KEYCLOAK_CLIENT_ID: ${{ needs.test.outputs.keycloak_client_id }}
      KEYCLOAK_REALM: ${{ needs.test.outputs.keycloak_realm }}
      KEYCLOAK_SERVER: ${{ needs.test.outputs.keycloak_server }}

    steps:
      - uses: actions/checkout@v4

      - name: ‚òï Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: üèóÔ∏è Build JAR
        run: mvn -B clean package -DskipTests

      - name: üßπ Clean up Keycloak container
        if: always()
        run: |
          echo "Cleaning up Keycloak container..."
          docker stop $KEYCLOAK_CONTAINER || true
          docker rm $KEYCLOAK_CONTAINER || true
