name: Java CI with Maven

on:
  push:
    branches:
      - systest

env:
  PROFILE: systest
  AWS_REGION: "eu-west-1"
  API_VERSIONING: /api/v1
  DEV_FRONTEND_BASE_URL: http://localhost:3000
  KEYCLOAK_IMAGE: quay.io/keycloak/keycloak:26.2.5
  KEYCLOAK_CONTAINER: keycloak
  KEYCLOAK_PORT: 8081
  KEYCLOAK_REALM: meedl-prod
  KEYCLOAK_ADMIN: admin
  KEYCLOAK_ADMIN_PASSWORD: admin
  CLIENT_ID: meedl

jobs:
  test:
    name: Unit Test
    runs-on: ubuntu-24.04

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: meedl_build
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --mount type=tmpfs,destination=/var/lib/postgresql/data
        ports:
          - 5432:5432

    steps:
      - name: üß© Checkout repository
        uses: actions/checkout@v4

      - name: üß∞ Install PostgreSQL client + jq
        run: sudo apt-get update && sudo apt-get install -y postgresql-client curl jq

      - name: üïí Wait for PostgreSQL
        run: |
          echo "‚è≥ Waiting for PostgreSQL to start..."
          for i in {1..30}; do
            if pg_isready -h localhost -U postgres > /dev/null 2>&1; then
              echo "‚úÖ PostgreSQL is ready!"
              break
            fi
            sleep 2
          done
      - name: üöÄ Start Keycloak with meedl-prod realm import
        run: |
          echo "Starting Keycloak (Realm: $KEYCLOAK_REALM)..."
          docker run -d --name $KEYCLOAK_CONTAINER \
            -p $KEYCLOAK_PORT:8080 \
            -e KEYCLOAK_ADMIN=$KEYCLOAK_ADMIN \
            -e KEYCLOAK_ADMIN_PASSWORD=$KEYCLOAK_ADMIN_PASSWORD \
            -v $PWD/backend/keycloak/realms/$KEYCLOAK_REALM.json:/opt/keycloak/data/import/$KEYCLOAK_REALM.json \
            $KEYCLOAK_IMAGE \
            start-dev --import-realm \
              --http-enabled=true \
              --hostname-strict=false \
              --spi-theme-static-max-age=-1 \
              --spi-theme-cache-themes=false \
              --spi-theme-cache-templates=false \
              --features=scripts,token-exchange,admin-fine-grained-authz
          echo "‚è≥ Waiting for Keycloak to start on port $KEYCLOAK_PORT..."
          for i in {1..60}; do
            if curl -fs "http://localhost:$KEYCLOAK_PORT/realms/$KEYCLOAK_REALM" > /dev/null; then
              echo "‚úÖ Keycloak is up and realm is available!"
              break
            fi
            echo "Still waiting... ($i/60)"
            sleep 5
          done
      - name: üîê Extract Keycloak client secret
        run: |
          echo "Fetching client secret for client: $CLIENT_ID"
          docker exec $KEYCLOAK_CONTAINER /opt/keycloak/bin/kcadm.sh config credentials \
            --server http://localhost:8080 \
            --realm master \
            --user $KEYCLOAK_ADMIN \
            --password $KEYCLOAK_ADMIN_PASSWORD
          CLIENT_SECRET=$(docker exec $KEYCLOAK_CONTAINER /opt/keycloak/bin/kcadm.sh get clients -r $KEYCLOAK_REALM \
            --fields clientId,secret | jq -r ".[] | select(.clientId==\"$CLIENT_ID\") | .secret")
          echo "KEYCLOAK_CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          echo "KEYCLOAK_CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV
          echo "KEYCLOAK_REALM=$KEYCLOAK_REALM" >> $GITHUB_ENV
          echo "KEYCLOAK_SERVER=http://localhost:$KEYCLOAK_PORT" >> $GITHUB_ENV
          echo "‚úÖ Client secret extracted successfully."
      - name: üß† Confirm exported variables
        run: |
          echo "KEYCLOAK_CLIENT_ID=$KEYCLOAK_CLIENT_ID"
          echo "KEYCLOAK_CLIENT_SECRET=$KEYCLOAK_CLIENT_SECRET"
          echo "KEYCLOAK_REALM=$KEYCLOAK_REALM"
          echo "KEYCLOAK_SERVER=$KEYCLOAK_SERVER"
      - name: ‚òï Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: üß™ Run Maven Tests
        env:
          KEYCLOAK_CLIENT_ID: ${{ env.KEYCLOAK_CLIENT_ID }}
          KEYCLOAK_CLIENT_SECRET: ${{ env.KEYCLOAK_CLIENT_SECRET }}
          KEYCLOAK_REALM: ${{ env.KEYCLOAK_REALM }}
          KEYCLOAK_SERVER: ${{ env.KEYCLOAK_SERVER }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          echo "üßπ Resetting local test DB..."
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS meedl_build;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE meedl_build;"
          echo "üîß Overriding DB settings for CI..."
          # ‚úÖ Define DB connection values explicitly
          export DATABASE_HOST=localhost
          export DATABASE_PORT=5432
          export DATABASE_NAME=meedl_build
          export DATABASE_USERNAME=postgres
          export DATABASE_PASSWORD=postgres
          # ‚úÖ Compose full JDBC URL
          export DATABASE_URL="jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}"
          # ‚úÖ Let Spring Boot & Flyway know these values
          export SPRING_DATASOURCE_URL="${DATABASE_URL}"
          export SPRING_DATASOURCE_USERNAME="${DATABASE_USERNAME}"
          export SPRING_DATASOURCE_PASSWORD="${DATABASE_PASSWORD}"
          export SPRING_FLYWAY_URL="${DATABASE_URL}"
          export SPRING_FLYWAY_USER="${DATABASE_USERNAME}"
          export SPRING_FLYWAY_PASSWORD="${DATABASE_PASSWORD}"
          export SPRING_FLYWAY_VALIDATE_ON_MIGRATE=true
          echo "‚úÖ Database URL resolved to: ${DATABASE_URL}"
          echo "üöÄ Running Maven tests..."
          mvn -B clean test
      - name: üìä Upload Surefire Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: target/surefire-reports/

  build:
    name: Build and Analyze
    needs: [test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: ‚òï Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: üèóÔ∏è Build JAR
        run: mvn -B clean package -DskipTests

      - name: üßπ Stop and clean Keycloak container
        if: always()
        run: |
          echo "Cleaning up Keycloak container..."
          docker stop $KEYCLOAK_CONTAINER || true
          docker rm $KEYCLOAK_CONTAINER || true
