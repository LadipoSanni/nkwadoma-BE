name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Java and Maven
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

    - name: Compile with Maven
      run: mvn compile

    - name: Run unit tests with Maven
      run: mvn test

    - name: Run SonarQube analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn sonar:sonar -Dsonar.projectKey=my-project-key -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN

    - name: Build and package with Maven
      run: mvn package

    - name: Build and tag Docker image
      run: |
        docker build -t $ORG_NAME/$repo_name:latest .
        docker tag $ORG_NAME/$repo_name:latest my-docker-repo/$ORG_NAME/$repo_name:latest

    - name: Push Docker image to registry
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker push my-docker-repo/$ORG_NAME/$repo_name:latest

    - name: Publish test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: target/surefire-reports

    - name: Deploy to dev environment
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        ssh -o StrictHostKeyChecking=no user@dev-environment 'docker pull my-docker-repo/$ORG_NAME/$repo_name:latest && docker-compose up -d'

    - name: Run QA Automation tests
      run: |
        ssh -o StrictHostKeyChecking=no user@dev-environment 'cd /path/to/qa-tests && ./run-tests.sh'
